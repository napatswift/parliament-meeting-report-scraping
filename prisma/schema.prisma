generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MeetingSession {
  essemblyType                       String
  id                                 String
  sourceUrl                          String                               @unique
  startAt                            DateTime
  endAt                              DateTime?
  createdAt                          DateTime                             @default(now())
  updatedAt                          DateTime
  meetingCategoriesOnMeetingSessions MeetingCategoriesOnMeetingSessions[]
  meetingDocuments                   MeetingDocument[]

  @@unique([essemblyType, id])
}

model MeetingDocument {
  meetingSessionEssemblyType String
  meetingSessionId           String
  id                         Int
  documentName               String
  sourceUrl                  String
  createdAt                  DateTime       @default(now())
  updatedAt                  DateTime
  meetingSession             MeetingSession @relation(fields: [meetingSessionId, meetingSessionEssemblyType], references: [id, essemblyType])
  textDocuments              TextDocument[]

  @@unique([meetingSessionEssemblyType, meetingSessionId, id])
  @@index([meetingSessionEssemblyType, meetingSessionId])
}

model MeetingCategoriesOnMeetingSessions {
  meetingSessionEssemblyType String
  meetingSessionId           String
  meetingCategoryName        String
  meetingCategory            MeetingCategory @relation(fields: [meetingCategoryName], references: [categoryName], onDelete: Cascade, onUpdate: Cascade)
  meetingSession             MeetingSession  @relation(fields: [meetingSessionId, meetingSessionEssemblyType], references: [id, essemblyType], onDelete: Cascade, onUpdate: Cascade)

  @@unique([meetingSessionEssemblyType, meetingSessionId, meetingCategoryName])
}

model MeetingCategory {
  categoryName                       String                               @id
  order                              Int
  createdAt                          DateTime                             @default(now())
  updatedAt                          DateTime
  meetingCategoriesOnMeetingSessions MeetingCategoriesOnMeetingSessions[]
}

model Editor {
  createdAt  DateTime    @default(now())
  updatedAt  DateTime
  username   String      @id
  slatePages SlatePage[]
}

model SlatePage {
  id        Int      @id @default(autoincrement())
  pageId    Int
  nodes     Json
  editorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  editor    Editor   @relation(fields: [editorId], references: [username])
  textPage  TextPage @relation(fields: [pageId], references: [id])
}

model TextDocument {
  id                                        Int             @id @default(autoincrement())
  meetingDocumentId                         Int
  meetingDocumentMeetingSessionEssemblyType String
  meetingDocumentMeetingSessionId           String
  meetingDocument                           MeetingDocument @relation(fields: [meetingDocumentMeetingSessionEssemblyType, meetingDocumentMeetingSessionId, meetingDocumentId], references: [meetingSessionEssemblyType, meetingSessionId, id])
  textPages                                 TextPage[]
  createdAt                                 DateTime        @default(now())
  updatedAt                                 DateTime
}

model TextLine {
  id              Int           @id @default(autoincrement())
  text            String
  lineIndex       Int
  x0              Float
  y0              Float
  x1              Float
  y1              Float
  textParagraphId Int
  textParagraph   TextParagraph @relation(fields: [textParagraphId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model TextPage {
  id             Int             @id @default(autoincrement())
  pageIndex      Int
  pageNumber     String
  sizeWidth      Float
  sizeHeight     Float
  isImage        Boolean
  isSkipped      Boolean
  textDocumentId Int
  slatePages     SlatePage[]
  textDocument   TextDocument    @relation(fields: [textDocumentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  textParagraphs TextParagraph[]
}

model TextParagraph {
  id             Int        @id @default(autoincrement())
  paragraphIndex Int
  firstLineX0    Float
  lineHeight     Float
  textPageId     Int
  textLines      TextLine[]
  textPage       TextPage   @relation(fields: [textPageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
